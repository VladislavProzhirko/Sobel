// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Array2Mat.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Array2Mat::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Array2Mat::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> Array2Mat::ap_ST_fsm_state1 = "1";
const sc_lv<4> Array2Mat::ap_ST_fsm_state2 = "10";
const sc_lv<4> Array2Mat::ap_ST_fsm_pp0_stage0 = "100";
const sc_lv<4> Array2Mat::ap_ST_fsm_state5 = "1000";
const bool Array2Mat::ap_const_boolean_1 = true;
const sc_lv<32> Array2Mat::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Array2Mat::ap_const_lv32_2 = "10";
const bool Array2Mat::ap_const_boolean_0 = false;
const sc_lv<1> Array2Mat::ap_const_lv1_0 = "0";
const sc_lv<32> Array2Mat::ap_const_lv32_1 = "1";
const sc_lv<1> Array2Mat::ap_const_lv1_1 = "1";
const sc_lv<32> Array2Mat::ap_const_lv32_3 = "11";
const sc_lv<3> Array2Mat::ap_const_lv3_0 = "000";

Array2Mat::Array2Mat(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln178_1_fu_189_p2);
    sensitive << ( shl_ln1352_2_reg_228 );
    sensitive << ( trunc_ln178_fu_185_p1 );

    SC_METHOD(thread_add_ln178_fu_194_p2);
    sensitive << ( shl_ln_reg_223 );
    sensitive << ( add_ln178_1_fu_189_p2 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( img_data_stream_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln175_reg_233 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( img_data_stream_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln175_reg_233 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( img_data_stream_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln175_reg_233 );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter1);
    sensitive << ( img_data_stream_V_full_n );
    sensitive << ( icmp_ln175_reg_233 );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state3);
    sensitive << ( icmp_ln175_fu_174_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln174_fu_139_p2 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( icmp_ln174_fu_139_p2 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_col_V_fu_179_p2);
    sensitive << ( t_V_3_reg_120 );

    SC_METHOD(thread_fb_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( zext_ln178_fu_199_p1 );

    SC_METHOD(thread_fb_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_icmp_ln174_fu_139_p2);
    sensitive << ( img_rows_V_read_cast_reg_209 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( t_V_reg_109 );

    SC_METHOD(thread_icmp_ln175_fu_174_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( t_V_3_reg_120 );
    sensitive << ( img_cols_V_read_cast_reg_204 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_img_cols_V_read_cast_fu_131_p1);
    sensitive << ( img_cols_V_read );

    SC_METHOD(thread_img_data_stream_V_blk_n);
    sensitive << ( img_data_stream_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln175_reg_233 );

    SC_METHOD(thread_img_data_stream_V_din);
    sensitive << ( fb_q0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln175_reg_233 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_img_data_stream_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln175_reg_233 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_img_rows_V_read_cast_fu_135_p1);
    sensitive << ( img_rows_V_read );

    SC_METHOD(thread_row_V_fu_144_p2);
    sensitive << ( t_V_reg_109 );

    SC_METHOD(thread_shl_ln1352_2_fu_166_p3);
    sensitive << ( trunc_ln1352_1_fu_162_p1 );

    SC_METHOD(thread_shl_ln_fu_154_p3);
    sensitive << ( trunc_ln1352_fu_150_p1 );

    SC_METHOD(thread_trunc_ln1352_1_fu_162_p1);
    sensitive << ( t_V_reg_109 );

    SC_METHOD(thread_trunc_ln1352_fu_150_p1);
    sensitive << ( t_V_reg_109 );

    SC_METHOD(thread_trunc_ln178_fu_185_p1);
    sensitive << ( t_V_3_reg_120 );

    SC_METHOD(thread_zext_ln178_fu_199_p1);
    sensitive << ( add_ln178_fu_194_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln174_fu_139_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln175_fu_174_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    ap_CS_fsm = "0001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Array2Mat_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, fb_address0, "(port)fb_address0");
    sc_trace(mVcdFile, fb_ce0, "(port)fb_ce0");
    sc_trace(mVcdFile, fb_q0, "(port)fb_q0");
    sc_trace(mVcdFile, img_rows_V_read, "(port)img_rows_V_read");
    sc_trace(mVcdFile, img_cols_V_read, "(port)img_cols_V_read");
    sc_trace(mVcdFile, img_data_stream_V_din, "(port)img_data_stream_V_din");
    sc_trace(mVcdFile, img_data_stream_V_full_n, "(port)img_data_stream_V_full_n");
    sc_trace(mVcdFile, img_data_stream_V_write, "(port)img_data_stream_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, img_data_stream_V_blk_n, "img_data_stream_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln175_reg_233, "icmp_ln175_reg_233");
    sc_trace(mVcdFile, t_V_3_reg_120, "t_V_3_reg_120");
    sc_trace(mVcdFile, img_cols_V_read_cast_fu_131_p1, "img_cols_V_read_cast_fu_131_p1");
    sc_trace(mVcdFile, img_cols_V_read_cast_reg_204, "img_cols_V_read_cast_reg_204");
    sc_trace(mVcdFile, img_rows_V_read_cast_fu_135_p1, "img_rows_V_read_cast_fu_135_p1");
    sc_trace(mVcdFile, img_rows_V_read_cast_reg_209, "img_rows_V_read_cast_reg_209");
    sc_trace(mVcdFile, icmp_ln174_fu_139_p2, "icmp_ln174_fu_139_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, row_V_fu_144_p2, "row_V_fu_144_p2");
    sc_trace(mVcdFile, row_V_reg_218, "row_V_reg_218");
    sc_trace(mVcdFile, shl_ln_fu_154_p3, "shl_ln_fu_154_p3");
    sc_trace(mVcdFile, shl_ln_reg_223, "shl_ln_reg_223");
    sc_trace(mVcdFile, shl_ln1352_2_fu_166_p3, "shl_ln1352_2_fu_166_p3");
    sc_trace(mVcdFile, shl_ln1352_2_reg_228, "shl_ln1352_2_reg_228");
    sc_trace(mVcdFile, icmp_ln175_fu_174_p2, "icmp_ln175_fu_174_p2");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter0, "ap_block_state3_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter1, "ap_block_state4_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, col_V_fu_179_p2, "col_V_fu_179_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state3, "ap_condition_pp0_exit_iter0_state3");
    sc_trace(mVcdFile, t_V_reg_109, "t_V_reg_109");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, zext_ln178_fu_199_p1, "zext_ln178_fu_199_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, trunc_ln1352_fu_150_p1, "trunc_ln1352_fu_150_p1");
    sc_trace(mVcdFile, trunc_ln1352_1_fu_162_p1, "trunc_ln1352_1_fu_162_p1");
    sc_trace(mVcdFile, trunc_ln178_fu_185_p1, "trunc_ln178_fu_185_p1");
    sc_trace(mVcdFile, add_ln178_1_fu_189_p2, "add_ln178_1_fu_189_p2");
    sc_trace(mVcdFile, add_ln178_fu_194_p2, "add_ln178_fu_194_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

Array2Mat::~Array2Mat() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Array2Mat::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln174_fu_139_p2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state3.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln174_fu_139_p2.read()))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln175_fu_174_p2.read()))) {
        t_V_3_reg_120 = col_V_fu_179_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln174_fu_139_p2.read()))) {
        t_V_3_reg_120 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        t_V_reg_109 = row_V_reg_218.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        t_V_reg_109 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln175_reg_233 = icmp_ln175_fu_174_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        img_cols_V_read_cast_reg_204 = img_cols_V_read_cast_fu_131_p1.read();
        img_rows_V_read_cast_reg_209 = img_rows_V_read_cast_fu_135_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        row_V_reg_218 = row_V_fu_144_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln174_fu_139_p2.read()))) {
        shl_ln1352_2_reg_228 = shl_ln1352_2_fu_166_p3.read();
        shl_ln_reg_223 = shl_ln_fu_154_p3.read();
    }
}

void Array2Mat::thread_add_ln178_1_fu_189_p2() {
    add_ln178_1_fu_189_p2 = (!shl_ln1352_2_reg_228.read().is_01() || !trunc_ln178_fu_185_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(shl_ln1352_2_reg_228.read()) + sc_biguint<8>(trunc_ln178_fu_185_p1.read()));
}

void Array2Mat::thread_add_ln178_fu_194_p2() {
    add_ln178_fu_194_p2 = (!add_ln178_1_fu_189_p2.read().is_01() || !shl_ln_reg_223.read().is_01())? sc_lv<8>(): (sc_biguint<8>(add_ln178_1_fu_189_p2.read()) + sc_biguint<8>(shl_ln_reg_223.read()));
}

void Array2Mat::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[2];
}

void Array2Mat::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Array2Mat::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Array2Mat::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[3];
}

void Array2Mat::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Array2Mat::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(icmp_ln175_reg_233.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, img_data_stream_V_full_n.read()));
}

void Array2Mat::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(icmp_ln175_reg_233.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, img_data_stream_V_full_n.read()));
}

void Array2Mat::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(icmp_ln175_reg_233.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, img_data_stream_V_full_n.read()));
}

void Array2Mat::thread_ap_block_state3_pp0_stage0_iter0() {
    ap_block_state3_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Array2Mat::thread_ap_block_state4_pp0_stage0_iter1() {
    ap_block_state4_pp0_stage0_iter1 = (esl_seteq<1,1,1>(icmp_ln175_reg_233.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, img_data_stream_V_full_n.read()));
}

void Array2Mat::thread_ap_condition_pp0_exit_iter0_state3() {
    if (esl_seteq<1,1,1>(icmp_ln175_fu_174_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_0;
    }
}

void Array2Mat::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln174_fu_139_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Array2Mat::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void Array2Mat::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Array2Mat::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void Array2Mat::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln174_fu_139_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Array2Mat::thread_col_V_fu_179_p2() {
    col_V_fu_179_p2 = (!t_V_3_reg_120.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(t_V_3_reg_120.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void Array2Mat::thread_fb_address0() {
    fb_address0 =  (sc_lv<7>) (zext_ln178_fu_199_p1.read());
}

void Array2Mat::thread_fb_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        fb_ce0 = ap_const_logic_1;
    } else {
        fb_ce0 = ap_const_logic_0;
    }
}

void Array2Mat::thread_icmp_ln174_fu_139_p2() {
    icmp_ln174_fu_139_p2 = (!t_V_reg_109.read().is_01() || !img_rows_V_read_cast_reg_209.read().is_01())? sc_lv<1>(): sc_lv<1>(t_V_reg_109.read() == img_rows_V_read_cast_reg_209.read());
}

void Array2Mat::thread_icmp_ln175_fu_174_p2() {
    icmp_ln175_fu_174_p2 = (!t_V_3_reg_120.read().is_01() || !img_cols_V_read_cast_reg_204.read().is_01())? sc_lv<1>(): sc_lv<1>(t_V_3_reg_120.read() == img_cols_V_read_cast_reg_204.read());
}

void Array2Mat::thread_img_cols_V_read_cast_fu_131_p1() {
    img_cols_V_read_cast_fu_131_p1 = esl_sext<32,5>(img_cols_V_read.read());
}

void Array2Mat::thread_img_data_stream_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln175_reg_233.read(), ap_const_lv1_0))) {
        img_data_stream_V_blk_n = img_data_stream_V_full_n.read();
    } else {
        img_data_stream_V_blk_n = ap_const_logic_1;
    }
}

void Array2Mat::thread_img_data_stream_V_din() {
    img_data_stream_V_din = fb_q0.read();
}

void Array2Mat::thread_img_data_stream_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln175_reg_233.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        img_data_stream_V_write = ap_const_logic_1;
    } else {
        img_data_stream_V_write = ap_const_logic_0;
    }
}

void Array2Mat::thread_img_rows_V_read_cast_fu_135_p1() {
    img_rows_V_read_cast_fu_135_p1 = esl_sext<32,5>(img_rows_V_read.read());
}

void Array2Mat::thread_row_V_fu_144_p2() {
    row_V_fu_144_p2 = (!t_V_reg_109.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(t_V_reg_109.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void Array2Mat::thread_shl_ln1352_2_fu_166_p3() {
    shl_ln1352_2_fu_166_p3 = esl_concat<7,1>(trunc_ln1352_1_fu_162_p1.read(), ap_const_lv1_0);
}

void Array2Mat::thread_shl_ln_fu_154_p3() {
    shl_ln_fu_154_p3 = esl_concat<5,3>(trunc_ln1352_fu_150_p1.read(), ap_const_lv3_0);
}

void Array2Mat::thread_trunc_ln1352_1_fu_162_p1() {
    trunc_ln1352_1_fu_162_p1 = t_V_reg_109.read().range(7-1, 0);
}

void Array2Mat::thread_trunc_ln1352_fu_150_p1() {
    trunc_ln1352_fu_150_p1 = t_V_reg_109.read().range(5-1, 0);
}

void Array2Mat::thread_trunc_ln178_fu_185_p1() {
    trunc_ln178_fu_185_p1 = t_V_3_reg_120.read().range(8-1, 0);
}

void Array2Mat::thread_zext_ln178_fu_199_p1() {
    zext_ln178_fu_199_p1 = esl_zext<64,8>(add_ln178_fu_194_p2.read());
}

void Array2Mat::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln174_fu_139_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln175_fu_174_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln175_fu_174_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

