-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Mat2Array is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_V_empty_n : IN STD_LOGIC;
    img_data_stream_V_read : OUT STD_LOGIC;
    fb_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    fb_ce0 : OUT STD_LOGIC;
    fb_we0 : OUT STD_LOGIC;
    fb_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fb_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Mat2Array is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal img_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln240_fu_119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal row_V_fu_125_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal row_V_reg_362 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_131_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_reg_367 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln241_fu_147_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln241_reg_372 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln253_1_fu_155_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln253_1_reg_377 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_V_fu_169_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal col_V_reg_385 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal fb_addr_reg_390 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln241_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln253_reg_395 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln253_3_fu_237_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln253_3_reg_401 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln253_fu_287_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln253_reg_407 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_V_reg_97 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal t_V_1_reg_108 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln253_1_fu_203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln1352_1_fu_139_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln253_fu_151_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln253_fu_175_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln253_fu_179_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln253_2_fu_184_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln253_1_fu_188_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln_fu_193_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln253_2_fu_208_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln253_2_fu_212_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln1_fu_217_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_60_fu_225_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln253_4_fu_241_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln253_fu_245_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln253_1_fu_253_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln253_1_fu_261_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln253_7_fu_267_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln253_8_fu_271_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln253_1_fu_275_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln253_fu_281_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln253_fu_297_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln253_2_fu_302_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln253_5_fu_293_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln253_6_fu_308_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln253_fu_312_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_318_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln253_2_fu_335_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln253_3_fu_328_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln253_1_fu_340_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln253_2_fu_346_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln240_fu_119_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    t_V_1_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((img_data_stream_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                t_V_1_reg_108 <= col_V_reg_385;
            elsif (((icmp_ln240_fu_119_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_1_reg_108 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    t_V_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                t_V_reg_97 <= row_V_reg_362;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_reg_97 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln241_fu_163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                and_ln253_reg_407 <= and_ln253_fu_287_p2;
                fb_addr_reg_390 <= zext_ln253_1_fu_203_p1(5 - 1 downto 0);
                icmp_ln253_reg_395 <= icmp_ln253_fu_231_p2;
                    zext_ln253_3_reg_401(4 downto 3) <= zext_ln253_3_fu_237_p1(4 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                col_V_reg_385 <= col_V_fu_169_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                row_V_reg_362 <= row_V_fu_125_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln240_fu_119_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    shl_ln_reg_367(6 downto 3) <= shl_ln_fu_131_p3(6 downto 3);
                    trunc_ln253_1_reg_377(1) <= trunc_ln253_1_fu_155_p3(1);
                    zext_ln241_reg_372(4 downto 1) <= zext_ln241_fu_147_p1(4 downto 1);
            end if;
        end if;
    end process;
    shl_ln_reg_367(2 downto 0) <= "000";
    zext_ln241_reg_372(0) <= '0';
    zext_ln241_reg_372(5) <= '0';
    trunc_ln253_1_reg_377(0) <= '0';
    zext_ln253_3_reg_401(2 downto 0) <= "000";
    zext_ln253_3_reg_401(5) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, img_data_stream_V_empty_n, ap_CS_fsm_state4, icmp_ln240_fu_119_p2, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln241_fu_163_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln240_fu_119_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln241_fu_163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state4 => 
                if (((img_data_stream_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln253_1_fu_188_p2 <= std_logic_vector(unsigned(zext_ln253_2_fu_184_p1) + unsigned(shl_ln_reg_367));
    add_ln253_2_fu_212_p2 <= std_logic_vector(unsigned(trunc_ln253_1_reg_377) + unsigned(trunc_ln253_2_fu_208_p1));
    add_ln253_fu_179_p2 <= std_logic_vector(unsigned(zext_ln241_reg_372) + unsigned(zext_ln253_fu_175_p1));
    and_ln253_1_fu_340_p2 <= (xor_ln253_2_fu_335_p2 and fb_q0);
    and_ln253_2_fu_346_p2 <= (select_ln253_3_fu_328_p3 and and_ln253_reg_407);
    and_ln253_fu_287_p2 <= (shl_ln253_1_fu_275_p2 and lshr_ln253_fu_281_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, icmp_ln240_fu_119_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln240_fu_119_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln240_fu_119_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln240_fu_119_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_V_fu_169_p2 <= std_logic_vector(unsigned(t_V_1_reg_108) + unsigned(ap_const_lv4_1));
    empty_60_fu_225_p2 <= (shl_ln1_fu_217_p3 or ap_const_lv5_7);

    fb_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3, fb_addr_reg_390, zext_ln253_1_fu_203_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            fb_address0 <= fb_addr_reg_390;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fb_address0 <= zext_ln253_1_fu_203_p1(5 - 1 downto 0);
        else 
            fb_address0 <= "XXXXX";
        end if; 
    end process;


    fb_ce0_assign_proc : process(img_data_stream_V_empty_n, ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((img_data_stream_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            fb_ce0 <= ap_const_logic_1;
        else 
            fb_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fb_d0 <= (and_ln253_2_fu_346_p2 or and_ln253_1_fu_340_p2);

    fb_we0_assign_proc : process(img_data_stream_V_empty_n, ap_CS_fsm_state4)
    begin
        if (((img_data_stream_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            fb_we0 <= ap_const_logic_1;
        else 
            fb_we0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln240_fu_119_p2 <= "1" when (t_V_reg_97 = ap_const_lv4_A) else "0";
    icmp_ln241_fu_163_p2 <= "1" when (t_V_1_reg_108 = ap_const_lv4_A) else "0";
    icmp_ln253_fu_231_p2 <= "1" when (unsigned(shl_ln1_fu_217_p3) > unsigned(empty_60_fu_225_p2)) else "0";

    img_data_stream_V_blk_n_assign_proc : process(img_data_stream_V_empty_n, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            img_data_stream_V_blk_n <= img_data_stream_V_empty_n;
        else 
            img_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_data_stream_V_read_assign_proc : process(img_data_stream_V_empty_n, ap_CS_fsm_state4)
    begin
        if (((img_data_stream_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            img_data_stream_V_read <= ap_const_logic_1;
        else 
            img_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln253_fu_281_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln253_8_fu_271_p1(31-1 downto 0)))));
    lshr_ln_fu_193_p4 <= add_ln253_1_fu_188_p2(6 downto 2);
    row_V_fu_125_p2 <= std_logic_vector(unsigned(t_V_reg_97) + unsigned(ap_const_lv4_1));
    select_ln253_1_fu_253_p3 <= 
        zext_ln253_4_fu_241_p1 when (icmp_ln253_fu_231_p2(0) = '1') else 
        zext_ln253_3_fu_237_p1;
    select_ln253_2_fu_302_p3 <= 
        xor_ln253_fu_297_p2 when (icmp_ln253_reg_395(0) = '1') else 
        zext_ln253_3_reg_401;
    select_ln253_3_fu_328_p3 <= 
        tmp_fu_318_p4 when (icmp_ln253_reg_395(0) = '1') else 
        shl_ln253_fu_312_p2;
    select_ln253_fu_245_p3 <= 
        zext_ln253_3_fu_237_p1 when (icmp_ln253_fu_231_p2(0) = '1') else 
        zext_ln253_4_fu_241_p1;
    shl_ln1352_1_fu_139_p3 <= (t_V_reg_97 & ap_const_lv1_0);
    shl_ln1_fu_217_p3 <= (add_ln253_2_fu_212_p2 & ap_const_lv3_0);
    shl_ln253_1_fu_275_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln253_7_fu_267_p1(31-1 downto 0)))));
    shl_ln253_fu_312_p2 <= std_logic_vector(shift_left(unsigned(zext_ln253_5_fu_293_p1),to_integer(unsigned('0' & zext_ln253_6_fu_308_p1(31-1 downto 0)))));
    shl_ln_fu_131_p3 <= (t_V_reg_97 & ap_const_lv3_0);
    
    tmp_fu_318_p4_proc : process(shl_ln253_fu_312_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_fu_318_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := shl_ln253_fu_312_p2;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_fu_318_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_fu_318_p4_i) := shl_ln253_fu_312_p2(32-1-tmp_fu_318_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_318_p4 <= resvalue(32-1 downto 0);
    end process;

    trunc_ln253_1_fu_155_p3 <= (trunc_ln253_fu_151_p1 & ap_const_lv1_0);
    trunc_ln253_2_fu_208_p1 <= t_V_1_reg_108(2 - 1 downto 0);
    trunc_ln253_fu_151_p1 <= t_V_reg_97(1 - 1 downto 0);
    xor_ln253_1_fu_261_p2 <= (select_ln253_fu_245_p3 xor ap_const_lv6_1F);
    xor_ln253_2_fu_335_p2 <= (ap_const_lv32_FFFFFFFF xor and_ln253_reg_407);
    xor_ln253_fu_297_p2 <= (zext_ln253_3_reg_401 xor ap_const_lv6_1F);
    zext_ln241_fu_147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1352_1_fu_139_p3),6));
    zext_ln253_1_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_193_p4),64));
    zext_ln253_2_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln253_fu_179_p2),7));
    zext_ln253_3_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_217_p3),6));
    zext_ln253_4_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_60_fu_225_p2),6));
    zext_ln253_5_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(img_data_stream_V_dout),32));
    zext_ln253_6_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln253_2_fu_302_p3),32));
    zext_ln253_7_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln253_1_fu_253_p3),32));
    zext_ln253_8_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln253_1_fu_261_p2),32));
    zext_ln253_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_1_reg_108),6));
end behav;
