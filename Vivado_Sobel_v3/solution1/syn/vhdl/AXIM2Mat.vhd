-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AXIM2Mat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    fb_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    fb_ce0 : OUT STD_LOGIC;
    fb_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    img_rows_V_dout : IN STD_LOGIC_VECTOR (4 downto 0);
    img_rows_V_empty_n : IN STD_LOGIC;
    img_rows_V_read : OUT STD_LOGIC;
    img_cols_V_dout : IN STD_LOGIC_VECTOR (4 downto 0);
    img_cols_V_empty_n : IN STD_LOGIC;
    img_cols_V_read : OUT STD_LOGIC;
    img_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_V_full_n : IN STD_LOGIC;
    img_data_stream_V_write : OUT STD_LOGIC;
    img_rows_V_out_din : OUT STD_LOGIC_VECTOR (4 downto 0);
    img_rows_V_out_full_n : IN STD_LOGIC;
    img_rows_V_out_write : OUT STD_LOGIC;
    img_cols_V_out_din : OUT STD_LOGIC_VECTOR (4 downto 0);
    img_cols_V_out_full_n : IN STD_LOGIC;
    img_cols_V_out_write : OUT STD_LOGIC );
end;


architecture behav of AXIM2Mat is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal img_rows_V_blk_n : STD_LOGIC;
    signal img_cols_V_blk_n : STD_LOGIC;
    signal img_data_stream_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln175_reg_409 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln175_reg_409_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal img_rows_V_out_blk_n : STD_LOGIC;
    signal img_cols_V_out_blk_n : STD_LOGIC;
    signal t_V_3_reg_145 : STD_LOGIC_VECTOR (31 downto 0);
    signal rows_V_fu_156_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rows_V_reg_375 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal cols_V_fu_160_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_V_reg_380 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln174_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal row_V_fu_169_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_V_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_179_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_reg_394 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1352_1_fu_191_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1352_1_reg_399 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_203_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_reg_404 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln175_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal col_V_fu_216_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal trunc_ln178_2_i1_i1_fu_255_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln178_2_i1_i1_reg_423 : STD_LOGIC_VECTOR (1 downto 0);
    signal fb_pix_fu_371_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal fb_pix_reg_428 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal t_V_reg_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln178_fu_246_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal rows_V_fu_156_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal cols_V_fu_160_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1352_fu_175_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1352_2_fu_187_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_76_fu_199_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln178_fu_222_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln178_fu_226_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln178_1_fu_231_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_fu_236_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_78_fu_251_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_260_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_79_fu_267_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln178_1_fu_279_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln178_2_fu_283_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln178_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln178_fu_297_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln178_1_fu_309_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_287_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln178_fu_303_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln178_fu_315_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln178_2_fu_331_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln178_2_fu_339_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln178_1_fu_323_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln178_3_fu_345_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln178_4_fu_349_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln178_fu_353_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln178_1_fu_359_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln178_fu_365_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln174_fu_164_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln174_fu_164_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((icmp_ln174_fu_164_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    t_V_3_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln175_fu_211_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                t_V_3_reg_145 <= col_V_fu_216_p2;
            elsif (((icmp_ln174_fu_164_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_3_reg_145 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    t_V_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                t_V_reg_134 <= row_V_reg_389;
            elsif ((not(((img_cols_V_out_full_n = ap_const_logic_0) or (img_rows_V_out_full_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (img_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_reg_134 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((img_cols_V_out_full_n = ap_const_logic_0) or (img_rows_V_out_full_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (img_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                cols_V_reg_380 <= cols_V_fu_160_p1;
                rows_V_reg_375 <= rows_V_fu_156_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln175_reg_409 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                fb_pix_reg_428 <= fb_pix_fu_371_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln175_reg_409 <= icmp_ln175_fu_211_p2;
                icmp_ln175_reg_409_pp0_iter1_reg <= icmp_ln175_reg_409;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                row_V_reg_389 <= row_V_fu_169_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln174_fu_164_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    shl_ln_reg_394(7 downto 3) <= shl_ln_fu_179_p3(7 downto 3);
                    tmp_s_reg_404(1) <= tmp_s_fu_203_p3(1);
                    trunc_ln1352_1_reg_399(7 downto 1) <= trunc_ln1352_1_fu_191_p3(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln175_fu_211_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trunc_ln178_2_i1_i1_reg_423 <= trunc_ln178_2_i1_i1_fu_255_p2;
            end if;
        end if;
    end process;
    shl_ln_reg_394(2 downto 0) <= "000";
    trunc_ln1352_1_reg_399(0) <= '0';
    tmp_s_reg_404(0) <= '0';

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, img_rows_V_empty_n, img_cols_V_empty_n, img_rows_V_out_full_n, img_cols_V_out_full_n, ap_enable_reg_pp0_iter2, icmp_ln174_fu_164_p2, ap_CS_fsm_state2, icmp_ln175_fu_211_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((img_cols_V_out_full_n = ap_const_logic_0) or (img_rows_V_out_full_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (img_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln174_fu_164_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln175_fu_211_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln175_fu_211_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln178_1_fu_231_p2 <= std_logic_vector(unsigned(add_ln178_fu_226_p2) + unsigned(trunc_ln1352_1_reg_399));
    add_ln178_fu_226_p2 <= std_logic_vector(unsigned(shl_ln_reg_394) + unsigned(trunc_ln178_fu_222_p1));
    and_ln178_fu_365_p2 <= (lshr_ln178_fu_353_p2 and lshr_ln178_1_fu_359_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(img_data_stream_V_full_n, ap_enable_reg_pp0_iter2, icmp_ln175_reg_409_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln175_reg_409_pp0_iter1_reg = ap_const_lv1_0) and (img_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(img_data_stream_V_full_n, ap_enable_reg_pp0_iter2, icmp_ln175_reg_409_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln175_reg_409_pp0_iter1_reg = ap_const_lv1_0) and (img_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(img_data_stream_V_full_n, ap_enable_reg_pp0_iter2, icmp_ln175_reg_409_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln175_reg_409_pp0_iter1_reg = ap_const_lv1_0) and (img_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, img_rows_V_empty_n, img_cols_V_empty_n, img_rows_V_out_full_n, img_cols_V_out_full_n)
    begin
                ap_block_state1 <= ((img_cols_V_out_full_n = ap_const_logic_0) or (img_rows_V_out_full_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (img_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter2_assign_proc : process(img_data_stream_V_full_n, icmp_ln175_reg_409_pp0_iter1_reg)
    begin
                ap_block_state5_pp0_stage0_iter2 <= ((icmp_ln175_reg_409_pp0_iter1_reg = ap_const_lv1_0) and (img_data_stream_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln175_fu_211_p2)
    begin
        if ((icmp_ln175_fu_211_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, icmp_ln174_fu_164_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln174_fu_164_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    col_V_fu_216_p2 <= std_logic_vector(unsigned(t_V_3_reg_145) + unsigned(ap_const_lv32_1));
    cols_V_fu_160_p0 <= img_cols_V_dout;
        cols_V_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(cols_V_fu_160_p0),32));

    empty_76_fu_199_p1 <= t_V_reg_134(1 - 1 downto 0);
    empty_78_fu_251_p1 <= t_V_3_reg_145(2 - 1 downto 0);
    empty_79_fu_267_p2 <= (tmp_1_fu_260_p3 or ap_const_lv5_7);
    fb_address0 <= zext_ln178_fu_246_p1(5 - 1 downto 0);

    fb_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fb_ce0 <= ap_const_logic_1;
        else 
            fb_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fb_pix_fu_371_p1 <= and_ln178_fu_365_p2(8 - 1 downto 0);
    icmp_ln174_fu_164_p2 <= "1" when (t_V_reg_134 = rows_V_reg_375) else "0";
    icmp_ln175_fu_211_p2 <= "1" when (t_V_3_reg_145 = cols_V_reg_380) else "0";
    icmp_ln178_fu_273_p2 <= "1" when (unsigned(tmp_1_fu_260_p3) > unsigned(empty_79_fu_267_p2)) else "0";

    img_cols_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_cols_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_cols_V_blk_n <= img_cols_V_empty_n;
        else 
            img_cols_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_cols_V_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_cols_V_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_cols_V_out_blk_n <= img_cols_V_out_full_n;
        else 
            img_cols_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_cols_V_out_din <= img_cols_V_dout;

    img_cols_V_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_rows_V_empty_n, img_cols_V_empty_n, img_rows_V_out_full_n, img_cols_V_out_full_n)
    begin
        if ((not(((img_cols_V_out_full_n = ap_const_logic_0) or (img_rows_V_out_full_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (img_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_cols_V_out_write <= ap_const_logic_1;
        else 
            img_cols_V_out_write <= ap_const_logic_0;
        end if; 
    end process;


    img_cols_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_rows_V_empty_n, img_cols_V_empty_n, img_rows_V_out_full_n, img_cols_V_out_full_n)
    begin
        if ((not(((img_cols_V_out_full_n = ap_const_logic_0) or (img_rows_V_out_full_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (img_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_cols_V_read <= ap_const_logic_1;
        else 
            img_cols_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img_data_stream_V_blk_n_assign_proc : process(img_data_stream_V_full_n, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, icmp_ln175_reg_409_pp0_iter1_reg)
    begin
        if (((icmp_ln175_reg_409_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            img_data_stream_V_blk_n <= img_data_stream_V_full_n;
        else 
            img_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_data_stream_V_din <= fb_pix_reg_428;

    img_data_stream_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln175_reg_409_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln175_reg_409_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            img_data_stream_V_write <= ap_const_logic_1;
        else 
            img_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;


    img_rows_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_rows_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_rows_V_blk_n <= img_rows_V_empty_n;
        else 
            img_rows_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_rows_V_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_rows_V_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_rows_V_out_blk_n <= img_rows_V_out_full_n;
        else 
            img_rows_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_rows_V_out_din <= img_rows_V_dout;

    img_rows_V_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_rows_V_empty_n, img_cols_V_empty_n, img_rows_V_out_full_n, img_cols_V_out_full_n)
    begin
        if ((not(((img_cols_V_out_full_n = ap_const_logic_0) or (img_rows_V_out_full_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (img_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_rows_V_out_write <= ap_const_logic_1;
        else 
            img_rows_V_out_write <= ap_const_logic_0;
        end if; 
    end process;


    img_rows_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, img_rows_V_empty_n, img_cols_V_empty_n, img_rows_V_out_full_n, img_cols_V_out_full_n)
    begin
        if ((not(((img_cols_V_out_full_n = ap_const_logic_0) or (img_rows_V_out_full_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (img_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_rows_V_read <= ap_const_logic_1;
        else 
            img_rows_V_read <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(icmp_ln174_fu_164_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln174_fu_164_p2 = ap_const_lv1_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln178_1_fu_359_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln178_4_fu_349_p1(31-1 downto 0)))));
    lshr_ln178_fu_353_p2 <= std_logic_vector(shift_right(unsigned(select_ln178_1_fu_323_p3),to_integer(unsigned('0' & zext_ln178_3_fu_345_p1(31-1 downto 0)))));
    lshr_ln_fu_236_p4 <= add_ln178_1_fu_231_p2(7 downto 2);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    row_V_fu_169_p2 <= std_logic_vector(unsigned(t_V_reg_134) + unsigned(ap_const_lv32_1));
    rows_V_fu_156_p0 <= img_rows_V_dout;
        rows_V_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rows_V_fu_156_p0),32));

    select_ln178_1_fu_323_p3 <= 
        tmp_fu_287_p4 when (icmp_ln178_fu_273_p2(0) = '1') else 
        fb_q0;
    select_ln178_2_fu_331_p3 <= 
        xor_ln178_fu_303_p2 when (icmp_ln178_fu_273_p2(0) = '1') else 
        zext_ln178_1_fu_279_p1;
    select_ln178_fu_315_p3 <= 
        sub_ln178_fu_297_p2 when (icmp_ln178_fu_273_p2(0) = '1') else 
        sub_ln178_1_fu_309_p2;
    shl_ln_fu_179_p3 <= (trunc_ln1352_fu_175_p1 & ap_const_lv3_0);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln178_1_fu_309_p2 <= std_logic_vector(unsigned(zext_ln178_2_fu_283_p1) - unsigned(zext_ln178_1_fu_279_p1));
    sub_ln178_2_fu_339_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(select_ln178_fu_315_p3));
    sub_ln178_fu_297_p2 <= std_logic_vector(unsigned(zext_ln178_1_fu_279_p1) - unsigned(zext_ln178_2_fu_283_p1));
    tmp_1_fu_260_p3 <= (trunc_ln178_2_i1_i1_reg_423 & ap_const_lv3_0);
    
    tmp_fu_287_p4_proc : process(fb_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_fu_287_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := fb_q0;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_fu_287_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_fu_287_p4_i) := fb_q0(32-1-tmp_fu_287_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_287_p4 <= resvalue(32-1 downto 0);
    end process;

    tmp_s_fu_203_p3 <= (empty_76_fu_199_p1 & ap_const_lv1_0);
    trunc_ln1352_1_fu_191_p3 <= (trunc_ln1352_2_fu_187_p1 & ap_const_lv1_0);
    trunc_ln1352_2_fu_187_p1 <= t_V_reg_134(7 - 1 downto 0);
    trunc_ln1352_fu_175_p1 <= t_V_reg_134(5 - 1 downto 0);
    trunc_ln178_2_i1_i1_fu_255_p2 <= std_logic_vector(unsigned(tmp_s_reg_404) + unsigned(empty_78_fu_251_p1));
    trunc_ln178_fu_222_p1 <= t_V_3_reg_145(8 - 1 downto 0);
    xor_ln178_fu_303_p2 <= (zext_ln178_1_fu_279_p1 xor ap_const_lv6_1F);
    zext_ln178_1_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_260_p3),6));
    zext_ln178_2_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_79_fu_267_p2),6));
    zext_ln178_3_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln178_2_fu_331_p3),32));
    zext_ln178_4_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln178_2_fu_339_p2),32));
    zext_ln178_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_236_p4),64));
end behav;
