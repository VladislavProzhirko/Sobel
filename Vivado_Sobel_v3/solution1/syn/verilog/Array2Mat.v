// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Array2Mat (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fb_address0,
        fb_ce0,
        fb_q0,
        img_rows_V_read,
        img_cols_V_read,
        img_data_stream_V_din,
        img_data_stream_V_full_n,
        img_data_stream_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] fb_address0;
output   fb_ce0;
input  [7:0] fb_q0;
input  [4:0] img_rows_V_read;
input  [4:0] img_cols_V_read;
output  [7:0] img_data_stream_V_din;
input   img_data_stream_V_full_n;
output   img_data_stream_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fb_ce0;
reg img_data_stream_V_write;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    img_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln175_reg_233;
reg   [31:0] t_V_3_reg_120;
wire  signed [31:0] img_cols_V_read_cast_fu_131_p1;
reg  signed [31:0] img_cols_V_read_cast_reg_204;
wire  signed [31:0] img_rows_V_read_cast_fu_135_p1;
reg  signed [31:0] img_rows_V_read_cast_reg_209;
wire   [0:0] icmp_ln174_fu_139_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] row_V_fu_144_p2;
reg   [31:0] row_V_reg_218;
wire   [7:0] shl_ln_fu_154_p3;
reg   [7:0] shl_ln_reg_223;
wire   [7:0] shl_ln1352_2_fu_166_p3;
reg   [7:0] shl_ln1352_2_reg_228;
wire   [0:0] icmp_ln175_fu_174_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] col_V_fu_179_p2;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [31:0] t_V_reg_109;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln178_fu_199_p1;
reg    ap_block_pp0_stage0_01001;
wire   [4:0] trunc_ln1352_fu_150_p1;
wire   [6:0] trunc_ln1352_1_fu_162_p1;
wire   [7:0] trunc_ln178_fu_185_p1;
wire   [7:0] add_ln178_1_fu_189_p2;
wire   [7:0] add_ln178_fu_194_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln174_fu_139_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln174_fu_139_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln175_fu_174_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_V_3_reg_120 <= col_V_fu_179_p2;
    end else if (((icmp_ln174_fu_139_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_3_reg_120 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        t_V_reg_109 <= row_V_reg_218;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_109 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln175_reg_233 <= icmp_ln175_fu_174_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        img_cols_V_read_cast_reg_204 <= img_cols_V_read_cast_fu_131_p1;
        img_rows_V_read_cast_reg_209 <= img_rows_V_read_cast_fu_135_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        row_V_reg_218 <= row_V_fu_144_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln174_fu_139_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shl_ln1352_2_reg_228[7 : 1] <= shl_ln1352_2_fu_166_p3[7 : 1];
        shl_ln_reg_223[7 : 3] <= shl_ln_fu_154_p3[7 : 3];
    end
end

always @ (*) begin
    if ((icmp_ln175_fu_174_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln174_fu_139_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln174_fu_139_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fb_ce0 = 1'b1;
    end else begin
        fb_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln175_reg_233 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_data_stream_V_blk_n = img_data_stream_V_full_n;
    end else begin
        img_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln175_reg_233 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_data_stream_V_write = 1'b1;
    end else begin
        img_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln174_fu_139_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln175_fu_174_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln175_fu_174_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln178_1_fu_189_p2 = (shl_ln1352_2_reg_228 + trunc_ln178_fu_185_p1);

assign add_ln178_fu_194_p2 = (add_ln178_1_fu_189_p2 + shl_ln_reg_223);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln175_reg_233 == 1'd0) & (img_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln175_reg_233 == 1'd0) & (img_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln175_reg_233 == 1'd0) & (img_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln175_reg_233 == 1'd0) & (img_data_stream_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign col_V_fu_179_p2 = (t_V_3_reg_120 + 32'd1);

assign fb_address0 = zext_ln178_fu_199_p1;

assign icmp_ln174_fu_139_p2 = ((t_V_reg_109 == img_rows_V_read_cast_reg_209) ? 1'b1 : 1'b0);

assign icmp_ln175_fu_174_p2 = ((t_V_3_reg_120 == img_cols_V_read_cast_reg_204) ? 1'b1 : 1'b0);

assign img_cols_V_read_cast_fu_131_p1 = $signed(img_cols_V_read);

assign img_data_stream_V_din = fb_q0;

assign img_rows_V_read_cast_fu_135_p1 = $signed(img_rows_V_read);

assign row_V_fu_144_p2 = (t_V_reg_109 + 32'd1);

assign shl_ln1352_2_fu_166_p3 = {{trunc_ln1352_1_fu_162_p1}, {1'd0}};

assign shl_ln_fu_154_p3 = {{trunc_ln1352_fu_150_p1}, {3'd0}};

assign trunc_ln1352_1_fu_162_p1 = t_V_reg_109[6:0];

assign trunc_ln1352_fu_150_p1 = t_V_reg_109[4:0];

assign trunc_ln178_fu_185_p1 = t_V_3_reg_120[7:0];

assign zext_ln178_fu_199_p1 = add_ln178_fu_194_p2;

always @ (posedge ap_clk) begin
    shl_ln_reg_223[2:0] <= 3'b000;
    shl_ln1352_2_reg_228[0] <= 1'b0;
end

endmodule //Array2Mat
